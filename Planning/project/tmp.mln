// predicate declarations move_b_to_b(object,object,object)
t = {-1,0,1}

unlock(pos,pos,key,shape)
move(pos,pos)
pickup(pos,key)
pickup_and_loose(pos,key,key)
putdown(pos,key)
conn(pos,pos,t)
key_shape(key,shape,t)
lock_shape( pos,shape,t)
at(robot,pos,t)
at_robot(pos,t)
place(pos,t)
key(key,t)
shape(shape,t)
locked(pos,t)
holding(key,t)
open(pos,t)
arm_empty(t)


// formulas: 
0.8631647090589503    unlock(V0,V1,V2,V3) => shape(V3,0)
0.8631647090589523    unlock(V0,V1,V2,V3) => conn(V0,V1,0)
0.8631647090589523    unlock(V0,V1,V2,V3) => at_robot(V0,0)
0.8631647090589523    unlock(V0,V1,V2,V3) => place(V0,0)
0.8631647090589523    unlock(V0,V1,V2,V3) => key_shape(V2,V3,0)
0.8631647090589523    unlock(V0,V1,V2,V3) => holding(V2,0)
0.8631647090589523    unlock(V0,V1,V2,V3) => open(V0,0)
0.8631647090589523    unlock(V0,V1,V2,V3) => locked(V1,-1)
0.8631647090589523    unlock(V0,V1,V2,V3) => place(V1,0)
0.8631647090589523    unlock(V0,V1,V2,V3) => open(V1,1)
0.8631647090589523    unlock(V0,V1,V2,V3) => conn(V1,V0,0)
0.8631647090589525    unlock(V0,V1,V2,V3) => lock_shape(V1,V3,0)
0.8631647090589525    unlock(V0,V1,V2,V3) => locked(V1,0)
0.8631647090589525    unlock(V0,V1,V2,V3) => key(V2,0)
0.0    unlock(V0,V1,V2,V3) => lock_shape(V0,V3,0)
